{"version":3,"sources":["component/weather.jsx","component/form.jsx","App.js","index.js"],"names":["Weather","props","className","icon","weatherIcon","city","description","temp_celsius","min","max","feels","class","minmaxTemp","temp_min","temp_max","wind","Math","floor","direct","pressure","sunrise","humidity","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","event","a","preventDefault","target","elements","value","country","fetch","api_call","status","json","response","setState","sys","celsius","calCelsius","main","temp","feels_like","speed","deg","weather","calTime","sunset","get_WeatherIcon","id","state","undefined","Thunderstrom","Drizzle","Rain","Snow","Mist","Smoke","Haze","Dust","Fog","Sand","Ash","Squall","Tornado","Clear","Clouds","Atmosphere","sunTime","Date","toUTCString","slice","icons","rangeId","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e5613097.chunk.js","sourcesContent":["import React from \"react\";\r\nconst Weather = (props) => {\r\n  return (\r\n    <div className=\"container text-light\">\r\n      <div className=\"cards\">\r\n        <div className=\"offset-md-4\">\r\n          <div className=\"row py-md-1 py-lg-1\">\r\n            {props.icon ? (\r\n              <i\r\n                className={`fas col-md-6 col-sm-12 py-md-5 py-lg-5 ${props.weatherIcon}`}\r\n              ></i>\r\n            ) : null}\r\n            <h1 className=\" fas col-md-2 col-sm-12 \">{props.city}</h1>\r\n          </div>\r\n        </div>\r\n        <h6 className=\"py-1\">{props.description}</h6>\r\n        {props.temp_celsius ? (\r\n          <h2 className=\"py-1\">{props.temp_celsius}&deg;</h2>\r\n        ) : null}\r\n        {minmaxTemp(props.temp_min, props.temp_max, props.feels)}\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-2 col-sm-4 offset-md-3 small\">\r\n            {props.wind ? (\r\n              <h4 className=\"border\">\r\n                <i className=\"fas min fa-wind\"></i>\r\n                <br />\r\n                {`${Math.floor(props.wind * 3.6)} km/h`}\r\n                <div className=\"text\">WIND</div>\r\n              </h4>\r\n            ) : null}\r\n          </div>\r\n\r\n          <div className=\"col-lg-2 col-sm-4 small\">\r\n            {props.direct ? (\r\n              <h4 className=\"border\">\r\n                <i className=\"far fa-compass\"></i>\r\n                <br />\r\n                {props.direct}&deg;\r\n                <div className=\"text\">WIND DIRECTION</div>\r\n              </h4>\r\n            ) : null}\r\n          </div>\r\n\r\n          <div className=\"col-lg-2 col-sm-4 small\">\r\n            {props.pressure ? (\r\n              <h4 className=\"border\">\r\n                <i className=\"fas fa-equals\"></i>\r\n                <br />\r\n                {` ${props.pressure} h/Pa`}\r\n                <div className=\"text\">PRESSURE</div>\r\n              </h4>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-3 col-sm-5 offset-md-4 small\">\r\n            {props.sunrise ? (\r\n              <h4 className=\"border\">\r\n                <i className=\"far fa-sun\"></i>\r\n                <br />\r\n                {props.sunrise}\r\n                <div className=\"text\">SUNRISE/SUNSET</div>\r\n              </h4>\r\n            ) : null}\r\n          </div>\r\n          <div className=\"col-lg-2 col-sm-4 small\">\r\n            {props.humidity ? (\r\n              <h4 className=\"border\">\r\n                <i className=\"fas fa-tint\"></i>\r\n                <br />\r\n                {`${props.humidity} %`}\r\n                <div className=\"text\">HUMIDITY</div>\r\n              </h4>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nfunction minmaxTemp(min, max, feels) {\r\n  if (min && max) {\r\n    return (\r\n      <h3>\r\n        <div className=\"row small\">\r\n          <div className=\"col-lg-1  col-sm-3 offset-md-4 offset-sm-2\">\r\n            <span className=\"px-4\">\r\n              <i class=\"fas fa-arrow-down\"></i>\r\n              {` ${min}`}&deg;\r\n            </span>\r\n          </div>\r\n          <div className=\"col-lg-1 col-sm-3\">\r\n            <span className=\"px-4\">\r\n              <i class=\"fas fa-arrow-up\"></i>\r\n              {` ${max}`}&deg;\r\n            </span>\r\n          </div>\r\n          <div className=\"col-lg-1 col-sm-2\">\r\n            <span className=\"px-4\">FEELS:{feels}&deg;</span>\r\n          </div>\r\n        </div>\r\n      </h3>\r\n    );\r\n  }\r\n}\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport \"./formStyle.scss\";\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div>{props.error ? error() : null}</div>\r\n      <div className=\"cards pt-2\"></div>\r\n      <form onSubmit={props.loadweather}>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-3 offset-md-2\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"city\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"City\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"country\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"Country\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 mt-md-0 py-2 text-md-left\">\r\n            <button className=\"send\">Get Weather</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction error() {\r\n  return (\r\n    <div className=\" alert alert-dark mx-5\" role=\"alert\">\r\n      Please Enter Correct City and Country\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport Weather from './component/weather';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Form from './component/form';\r\n\r\nconst API_key = \"429736441cf3572838aa10530929f7cd\";\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            city: undefined,\r\n            country: undefined,\r\n            icon: undefined,\r\n            main: undefined,\r\n            celsius: undefined,\r\n            temp_max: undefined,\r\n            temp_min: undefined,\r\n            feels: undefined,\r\n            wind: undefined,\r\n            humidity: undefined,\r\n            pressure: undefined,\r\n            direct: undefined,\r\n            description: \"\",\r\n            sunrise: undefined,\r\n            error: false\r\n\r\n        }\r\n        this.weatherIcon = {\r\n            Thunderstrom: \"fa-poo-storm\",\r\n            Drizzle: \"fa-cloud-rain\",\r\n            Rain: \"fa-cloud-showers-heavy\",\r\n            Snow: \"fa-snowflake\",\r\n            Mist: \"fa-smog\",\r\n            Smoke: \"fa-smog\",\r\n            Haze: \"fa-smog\",\r\n            Dust: \"fa-smog\",\r\n            Fog: \"fa-smog\",\r\n            Sand: \"fa-smog\",\r\n            Ash: \"fa-smog\",\r\n            Squall: \"fa-wind\",\r\n            Tornado: \"fa-wind\",\r\n            Clear: \"fa-sun\",\r\n            Clouds: \"fa-cloud\",\r\n            Atmosphere: \"fa-smog\"\r\n        }\r\n    }\r\n    calCelsius(temp) {\r\n        let cell = Math.floor(temp - 273.15);\r\n        return cell;\r\n    }\r\n    calTime(sunTime) {\r\n        let date = new Date(sunTime * 1000);\r\n        let utcString = date.toUTCString();\r\n        let time = utcString.slice(-11, -7);\r\n        return time;\r\n    }\r\n    get_WeatherIcon(icons, rangeId) {\r\n        switch (true) {\r\n            case rangeId >= 200 && rangeId <= 232:\r\n                this.setState({\r\n                    icon: this.weatherIcon.Thunderstrom\r\n                });\r\n                break;\r\n            case rangeId >= 300 && rangeId <= 321:\r\n                this.setState({\r\n                    icon: this.weatherIcon.Drizzle\r\n                });\r\n                break;\r\n            case rangeId >= 500 && rangeId <= 531:\r\n                this.setState({\r\n                    icon: this.weatherIcon.Rain\r\n                });\r\n                break;\r\n            case rangeId >= 600 && rangeId <= 622:\r\n                this.setState({\r\n                    icon: this.weatherIcon.Snow\r\n                });\r\n                break;\r\n            case rangeId >= 701 && rangeId <= 781:\r\n                this.setState({\r\n                    icon: this.weatherIcon.Atmosphere\r\n                });\r\n                break;\r\n            case rangeId === 800:\r\n                this.setState({\r\n                    icon: this.weatherIcon.Clear\r\n                });\r\n                break;\r\n            case rangeId >= 801 && rangeId <= 804:\r\n                this.setState({\r\n                    icon: this.weatherIcon.Clouds\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    icon: this.weatherIcon.Clouds\r\n                });\r\n\r\n        }\r\n    }\r\n    getWeather = async (event) => {\r\n        event.preventDefault();\r\n        const city = event.target.elements.city.value;\r\n        const country = event.target.elements.country.value;\r\n\r\n        if (city && country) {\r\n            const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`)\r\n            //console.log(api_call.status);\r\n            if (api_call.status !== 404) {\r\n                const response = await api_call.json();\r\n\r\n                this.setState({\r\n                    city: `${response.name},${response.sys.country}`,\r\n                    celsius: this.calCelsius(response.main.temp),\r\n                    temp_max: this.calCelsius(response.main.temp_max),\r\n                    temp_min: this.calCelsius(response.main.temp_min),\r\n                    feels: this.calCelsius(response.main.feels_like),\r\n                    wind: response.wind.speed,\r\n                    humidity: response.main.humidity,\r\n                    pressure: response.main.pressure,\r\n                    direct: response.wind.deg,\r\n                    description: response.weather[0].description,\r\n                    sunrise: `${this.calTime(response.sys.sunrise)}am/${this.calTime(response.sys.sunset)}pm`,\r\n                    error: false\r\n\r\n                })\r\n                this.get_WeatherIcon(this.weatherIcon, response.weather[0].id)\r\n            }\r\n            else {\r\n                this.setState({ error: true })\r\n            }\r\n\r\n        }\r\n        else {\r\n            this.setState({ error: true })\r\n        }\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"stars\" />\r\n                <div className=\"glow\" />\r\n                <div className=\"App\">\r\n                    <Form loadweather={this.getWeather} error={this.state.error} />\r\n                    <Weather\r\n                        city={this.state.city}\r\n                        country={this.state.country}\r\n                        temp_celsius={this.state.celsius}\r\n                        temp_max={this.state.temp_max}\r\n                        temp_min={this.state.temp_min}\r\n                        description={this.state.description}\r\n                        wind={this.state.wind}\r\n                        weatherIcon={this.state.icon}\r\n                        feels={this.state.feels}\r\n                        humidity={this.state.humidity}\r\n                        pressure={this.state.pressure}\r\n                        direct={this.state.direct}\r\n                        sunrise={this.state.sunrise}\r\n                        icon={this.state.icon}\r\n                    /></div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./style/style.scss\";\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}